// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header Component should apply values from theme 1`] = `
<View
  replaceTheme={[Function]}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "pink",
      "borderBottomColor": "#f2f2f2",
      "borderBottomWidth": 0.5,
      "flexDirection": "row",
      "justifyContent": "space-between",
      "paddingHorizontal": 10,
      "paddingVertical": 10,
    }
  }
  testID="headerContainer"
  updateTheme={[Function]}
>
  <RNCSafeAreaView
    edges={
      Array [
        "left",
        "top",
        "right",
      ]
    }
    style={
      Object {
        "flexDirection": "row",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "flex-start",
          "flex": 1,
        }
      }
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 3,
        }
      }
    />
    <View
      style={
        Object {
          "alignItems": "flex-end",
          "flex": 1,
        }
      }
    />
  </RNCSafeAreaView>
</View>
`;

exports[`Header Component should render center component by passing a config through props 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      >
        <Component />
      </Children>
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render left component by passing a component through props 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <Button
          onPress={[Function]}
          title="Test button"
        />
      </Children>
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render left component by passing a config through props 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <Component />
      </Children>
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render right component by passing a component through props 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <Button
          onPress={[Function]}
          title="Test button"
        />
      </Children>
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render right component by passing a config through props 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <Component />
      </Children>
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render with backgroundImage 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <ImageBackground
    source={
      Object {
        "uri": "http://google.com",
      }
    }
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </ImageBackground>
</Fragment>
`;

exports[`Header Component should render with backgroundImageStyle 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <View
    imageStyle={
      Object {
        "opacity": 0.1,
      }
    }
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </View>
</Fragment>
`;

exports[`Header Component should render without issues 1`] = `
<Fragment>
  <StatusBar
    animated={false}
    backgroundColor="#2089dc"
    showHideTransition="fade"
    translucent={true}
  />
  <ImageBackground
    source={
      Object {
        "uri": "https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_1280.jpg",
      }
    }
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#2089dc",
        "borderBottomColor": "#f2f2f2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 10,
        "paddingVertical": 10,
      }
    }
    testID="headerContainer"
  >
    <RNCSafeAreaView
      edges={
        Array [
          "left",
          "top",
          "right",
        ]
      }
      style={
        Object {
          "flexDirection": "row",
          "width": "100%",
        }
      }
    >
      <Children
        placement="left"
        style={
          Object {
            "flex": 1,
          }
        }
      />
      <Children
        placement="center"
        style={
          Object {
            "flex": 3,
          }
        }
      />
      <Children
        placement="right"
        style={
          Object {
            "flex": 1,
          }
        }
      />
    </RNCSafeAreaView>
  </ImageBackground>
</Fragment>
`;
