// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Icon component should render with icon type 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    onLongPress={undefined}
    onPress={undefined}
    style={
        Array [
            Object {
              "margin": 7,
            },
            Object {
              "borderRadius": 28,
              "height": 52,
              "width": 52,
            },
            false,
            Object {
              "alignItems": "center",
              "backgroundColor": "red",
              "justifyContent": "center",
            },
            undefined,
          ]
    }
    underlayColor="red"
>
    <Icon
        allowFontScaling={false}
        color="white"
        name="alert"
        size={24}
        style={
            Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Object {
                  "backgroundColor": "peru",
                },
              ]
        }
    />
</View>,
  "nodes": Array [
    <View
      onLongPress={undefined}
      onPress={undefined}
      style={
            Array [
                  Object {
                    "margin": 7,
                  },
                  Object {
                    "borderRadius": 28,
                    "height": 52,
                    "width": 52,
                  },
                  false,
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "red",
                    "justifyContent": "center",
                  },
                  undefined,
                ]
      }
      underlayColor="red"
>
      <Icon
            allowFontScaling={false}
            color="white"
            name="alert"
            size={24}
            style={
                  Array [
                        Object {
                          "backgroundColor": "transparent",
                        },
                        Object {
                          "backgroundColor": "peru",
                        },
                      ]
            }
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Icon
        color="red"
        iconStyle={
                Object {
                        "backgroundColor": "peru",
                      }
        }
        name="alert"
        raised={false}
        reverse={true}
        reverseColor="white"
        size={24}
        type="octicon"
        underlayColor="white"
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "color": "red",
          "iconStyle": Object {
            "backgroundColor": "peru",
          },
          "name": "alert",
          "raised": false,
          "reverse": true,
          "reverseColor": "white",
          "size": 24,
          "type": "octicon",
          "underlayColor": "white",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          onLongPress={undefined}
          onPress={undefined}
          style={
                    Array [
                              Object {
                                "margin": 7,
                              },
                              Object {
                                "borderRadius": 28,
                                "height": 52,
                                "width": 52,
                              },
                              false,
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "red",
                                "justifyContent": "center",
                              },
                              undefined,
                            ]
          }
          underlayColor="red"
>
          <Icon
                    allowFontScaling={false}
                    color="white"
                    name="alert"
                    size={24}
                    style={
                              Array [
                                        Object {
                                          "backgroundColor": "transparent",
                                        },
                                        Object {
                                          "backgroundColor": "peru",
                                        },
                                      ]
                    }
          />
</View>,
        "_debugID": 4,
        "_renderedOutput": <View
          onLongPress={undefined}
          onPress={undefined}
          style={
                    Array [
                              Object {
                                "margin": 7,
                              },
                              Object {
                                "borderRadius": 28,
                                "height": 52,
                                "width": 52,
                              },
                              false,
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "red",
                                "justifyContent": "center",
                              },
                              undefined,
                            ]
          }
          underlayColor="red"
>
          <Icon
                    allowFontScaling={false}
                    color="white"
                    name="alert"
                    size={24}
                    style={
                              Array [
                                        Object {
                                          "backgroundColor": "transparent",
                                        },
                                        Object {
                                          "backgroundColor": "peru",
                                        },
                                      ]
                    }
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Icon
    color="red"
    iconStyle={
        Object {
            "backgroundColor": "peru",
          }
    }
    name="alert"
    raised={false}
    reverse={true}
    reverseColor="white"
    size={24}
    type="octicon"
    underlayColor="white"
/>,
}
`;

exports[`Icon component should render without issues 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    onLongPress={undefined}
    onPress={undefined}
    style={
        Array [
            false,
            false,
            false,
            Object {
              "alignItems": "center",
              "backgroundColor": "transparent",
              "justifyContent": "center",
            },
            undefined,
          ]
    }
    underlayColor="white"
>
    <Icon
        allowFontScaling={false}
        color="black"
        name="wifi"
        size={24}
        style={
            Array [
                Object {
                  "backgroundColor": "transparent",
                },
                undefined,
              ]
        }
    />
</View>,
  "nodes": Array [
    <View
      onLongPress={undefined}
      onPress={undefined}
      style={
            Array [
                  false,
                  false,
                  false,
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "transparent",
                    "justifyContent": "center",
                  },
                  undefined,
                ]
      }
      underlayColor="white"
>
      <Icon
            allowFontScaling={false}
            color="black"
            name="wifi"
            size={24}
            style={
                  Array [
                        Object {
                          "backgroundColor": "transparent",
                        },
                        undefined,
                      ]
            }
      />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Icon
        color="black"
        name="wifi"
        raised={false}
        reverse={false}
        reverseColor="white"
        size={24}
        underlayColor="white"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "color": "black",
          "name": "wifi",
          "raised": false,
          "reverse": false,
          "reverseColor": "white",
          "size": 24,
          "underlayColor": "white",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          onLongPress={undefined}
          onPress={undefined}
          style={
                    Array [
                              false,
                              false,
                              false,
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "transparent",
                                "justifyContent": "center",
                              },
                              undefined,
                            ]
          }
          underlayColor="white"
>
          <Icon
                    allowFontScaling={false}
                    color="black"
                    name="wifi"
                    size={24}
                    style={
                              Array [
                                        Object {
                                          "backgroundColor": "transparent",
                                        },
                                        undefined,
                                      ]
                    }
          />
</View>,
        "_debugID": 2,
        "_renderedOutput": <View
          onLongPress={undefined}
          onPress={undefined}
          style={
                    Array [
                              false,
                              false,
                              false,
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "transparent",
                                "justifyContent": "center",
                              },
                              undefined,
                            ]
          }
          underlayColor="white"
>
          <Icon
                    allowFontScaling={false}
                    color="black"
                    name="wifi"
                    size={24}
                    style={
                              Array [
                                        Object {
                                          "backgroundColor": "transparent",
                                        },
                                        undefined,
                                      ]
                    }
          />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Icon
    color="black"
    name="wifi"
    raised={false}
    reverse={false}
    reverseColor="white"
    size={24}
    underlayColor="white"
/>,
}
`;
